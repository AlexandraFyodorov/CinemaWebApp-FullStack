{"ast":null,"code":"const initialValue = {\n  movies: [],\n  members: [],\n  subscriptions: [],\n  users: []\n};\nconst storeReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialValue;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    //MOVIES\n    case 'LOADMOVIES':\n      {\n        const movies = JSON.stringify({\n          ...state,\n          movies: action.payload\n        });\n        //sessionStorage.setItem('movies', movies);\n        return {\n          ...state,\n          movies: action.payload\n        };\n      }\n    case 'UPDATEMOVIE':\n      {\n        const updatedMovie = action.payload;\n        const updatedMovies = state.movies.map(movie => {\n          if (movie._id === updatedMovie._id) {\n            return {\n              ...movie,\n              ...updatedMovie\n            };\n          }\n          return movie;\n        });\n        return {\n          ...state,\n          movies: updatedMovies\n        };\n      }\n    case 'ADDMOVIE':\n      {\n        const newMovie = action.payload;\n        const updatedMovies = [...state.movies, newMovie];\n        return {\n          ...state,\n          movies: updatedMovies\n        };\n      }\n    case 'DELETEMOVIE':\n      {\n        const movieId = action.payload;\n        const updatedMovies = state.movies.filter(movie => movie._id !== movieId);\n        return {\n          ...state,\n          movies: updatedMovies\n        };\n      }\n    //MEMBERS\n    case 'LOADMEMBERS':\n      {\n        //sessionStorage.setItem('members', members);\n        return {\n          ...state,\n          members: action.payload\n        };\n      }\n    case 'UPDATEMEMBER':\n      {\n        const updatedMember = action.payload;\n        const updatedMembers = state.members.map(member => {\n          if (member._id === updatedMember._id) {\n            return {\n              ...member,\n              ...updatedMember\n            };\n          }\n          return member;\n        });\n        return {\n          ...state,\n          members: updatedMembers\n        };\n      }\n    case 'ADDMEMBER':\n      {\n        const newMember = action.payload;\n        const updatedMember = [...state.members, newMember];\n        return {\n          ...state,\n          members: updatedMember\n        };\n      }\n    case 'DELETEMEMBER':\n      {\n        const memberId = action.payload;\n        const updatedMembers = state.members.filter(member => member._id !== memberId);\n        return {\n          ...state,\n          members: updatedMembers\n        };\n      }\n    //Subscription\n    case 'LOADSUBSCRIPTIONS':\n      return {\n        ...state,\n        subscriptions: action.payload\n      };\n    case 'ADDSUBSCRIPTION':\n      {\n        const updatedSubscription = action.payload;\n        const memberId = updatedSubscription.memberId;\n        const subscriptions = Object.values(state.subscriptions);\n        console.log('updatedSubscription');\n        console.log(updatedSubscription);\n        console.log('memberId');\n        console.log(memberId);\n        console.log('subscriptions');\n        console.log(subscriptions);\n        const memberSubscription = subscriptions.find(subscription => subscription.memberId === memberId);\n        if (memberSubscription) {\n          // Create a new movie object\n          const newMovie = {\n            date: new Date(updatedSubscription.movies.date),\n            movieId: updatedSubscription.movies.movieId,\n            _id: updatedSubscription.movies._id\n          };\n          memberSubscription.movies.push(newMovie);\n        } else {\n          const newSubscription = {\n            _id: updatedSubscription._id,\n            memberId: updatedSubscription.memberId,\n            movies: [{\n              date: new Date(updatedSubscription.movies.date),\n              movieId: updatedSubscription.movies.movieId,\n              _id: updatedSubscription.movies._id\n            }]\n          };\n          subscriptions.push(newSubscription);\n        }\n        const updatedSubscriptions = subscriptions.reduce((acc, curr, index) => {\n          acc[index] = curr;\n          return acc;\n        }, {});\n        return {\n          ...state,\n          subscriptions: updatedSubscriptions\n        };\n      }\n    case 'DELETESUBSCRIPTION':\n      {\n        const memberId = action.payload;\n        const updatedSubscriptions = state.subscriptions.filter(sub => sub.memberId !== memberId);\n        return {\n          ...state,\n          subscriptions: updatedSubscriptions\n        };\n      }\n\n    //USERS\n    case 'LOADUSERS':\n      {\n        return {\n          ...state,\n          users: action.payload\n        };\n      }\n    case 'UPDATEUSER':\n      {\n        const updatedUser = action.payload;\n        const updatedUsers = state.users.map(user => {\n          if (user.id === updatedUser.id) {\n            return {\n              ...user,\n              ...updatedUser\n            };\n          }\n          return user;\n        });\n        return {\n          ...state,\n          users: updatedUsers\n        };\n      }\n    case 'ADDUSER':\n      {\n        const newUser = action.payload;\n        const updatedUser = [...state.users, newUser];\n        return {\n          ...state,\n          users: updatedUser\n        };\n      }\n    case 'DELETEUSER':\n      {\n        const userId = action.payload;\n        const updatedUsers = state.users.filter(user => user.id !== userId);\n        return {\n          ...state,\n          users: updatedUsers\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport default storeReducer;","map":{"version":3,"names":["initialValue","movies","members","subscriptions","users","storeReducer","state","arguments","length","undefined","action","type","JSON","stringify","payload","updatedMovie","updatedMovies","map","movie","_id","newMovie","movieId","filter","updatedMember","updatedMembers","member","newMember","memberId","updatedSubscription","Object","values","console","log","memberSubscription","find","subscription","date","Date","push","newSubscription","updatedSubscriptions","reduce","acc","curr","index","sub","updatedUser","updatedUsers","user","id","newUser","userId"],"sources":["D:/YanivArad/FullStack_Project/Client/cinema/src/rootReducer.js"],"sourcesContent":["\r\nconst initialValue = {\r\n  movies: [],\r\n  members: [],\r\n  subscriptions: [],\r\n  users: [],\r\n};\r\n\r\nconst storeReducer = (state = initialValue, action) => {\r\n  switch (action.type) {\r\n    //MOVIES\r\n    case 'LOADMOVIES':\r\n      {\r\n        const movies = JSON.stringify({ ...state, movies: action.payload });\r\n        //sessionStorage.setItem('movies', movies);\r\n        return { ...state, movies: action.payload };\r\n      }\r\n    case 'UPDATEMOVIE': {\r\n      const updatedMovie = action.payload;\r\n      const updatedMovies = state.movies.map(movie => {\r\n        if (movie._id === updatedMovie._id) {\r\n          return { ...movie, ...updatedMovie };\r\n        }\r\n        return movie;\r\n      });\r\n      return { ...state, movies: updatedMovies };\r\n    }\r\n    case 'ADDMOVIE': {\r\n      const newMovie = action.payload;\r\n      const updatedMovies = [...state.movies, newMovie];\r\n      return { ...state, movies: updatedMovies };\r\n    }\r\n\r\n    case 'DELETEMOVIE': {\r\n      const movieId = action.payload;\r\n      const updatedMovies = state.movies.filter(movie => movie._id !== movieId);\r\n      return { ...state, movies: updatedMovies };\r\n    }\r\n    //MEMBERS\r\n    case 'LOADMEMBERS': {\r\n      //sessionStorage.setItem('members', members);\r\n      return { ...state, members: action.payload };\r\n    }\r\n    case 'UPDATEMEMBER': {\r\n      const updatedMember = action.payload;\r\n      const updatedMembers = state.members.map(member => {\r\n        if (member._id === updatedMember._id) {\r\n          return { ...member, ...updatedMember };\r\n        }\r\n        return member;\r\n      });\r\n      return { ...state, members: updatedMembers };\r\n    }\r\n    case 'ADDMEMBER': {\r\n      const newMember = action.payload;\r\n      const updatedMember = [...state.members, newMember];\r\n      return { ...state, members: updatedMember };\r\n    }\r\n\r\n    case 'DELETEMEMBER': {\r\n      const memberId = action.payload;\r\n      const updatedMembers = state.members.filter(member => member._id !== memberId);\r\n      return { ...state, members: updatedMembers };\r\n    }\r\n    //Subscription\r\n    case 'LOADSUBSCRIPTIONS':\r\n      return { ...state, subscriptions: action.payload };\r\n\r\n    case 'ADDSUBSCRIPTION': {\r\n      const updatedSubscription = action.payload;\r\n      const memberId = updatedSubscription.memberId;\r\n      const subscriptions = Object.values(state.subscriptions);\r\n      console.log('updatedSubscription')\r\n      console.log(updatedSubscription)\r\n      console.log('memberId')\r\n      console.log(memberId)\r\n      console.log('subscriptions')\r\n      console.log(subscriptions)\r\n      const memberSubscription = subscriptions.find(subscription => subscription.memberId === memberId);\r\n      if (memberSubscription) {\r\n        // Create a new movie object\r\n        const newMovie = {\r\n          date: new Date(updatedSubscription.movies.date),\r\n          movieId: updatedSubscription.movies.movieId,\r\n          _id: updatedSubscription.movies._id\r\n        };\r\n        memberSubscription.movies.push(newMovie);\r\n      } else {\r\n        const newSubscription = {\r\n          _id: updatedSubscription._id,\r\n          memberId: updatedSubscription.memberId,\r\n          movies: [\r\n            {\r\n              date: new Date(updatedSubscription.movies.date),\r\n              movieId: updatedSubscription.movies.movieId,\r\n              _id: updatedSubscription.movies._id\r\n            }\r\n          ]\r\n        };\r\n        subscriptions.push(newSubscription);\r\n      }\r\n      const updatedSubscriptions = subscriptions.reduce((acc, curr, index) => {\r\n        acc[index] = curr;\r\n        return acc;\r\n      }, {});\r\n\r\n        return { ...state, subscriptions: updatedSubscriptions };\r\n      }\r\n \r\n\r\n    case 'DELETESUBSCRIPTION': {\r\n      const memberId = action.payload;\r\n      const updatedSubscriptions = state.subscriptions.filter(sub => sub.memberId !== memberId);\r\n      return { ...state, subscriptions: updatedSubscriptions };\r\n    }\r\n\r\n\r\n\r\n    //USERS\r\n    case 'LOADUSERS': {\r\n      return { ...state, users: action.payload };\r\n    }\r\n    case 'UPDATEUSER': {\r\n      const updatedUser = action.payload;\r\n      const updatedUsers = state.users.map(user => {\r\n        if (user.id === updatedUser.id) {\r\n          return { ...user, ...updatedUser };\r\n        }\r\n        return user;\r\n      });\r\n      return { ...state, users: updatedUsers };\r\n    }\r\n    case 'ADDUSER': {\r\n      const newUser = action.payload;\r\n      const updatedUser = [...state.users, newUser];\r\n      return { ...state, users: updatedUser };\r\n    }\r\n\r\n    case 'DELETEUSER': {\r\n      const userId = action.payload;\r\n      const updatedUsers = state.users.filter(user => user.id !== userId);\r\n      return { ...state, users: updatedUsers };\r\n    }\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default storeReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}