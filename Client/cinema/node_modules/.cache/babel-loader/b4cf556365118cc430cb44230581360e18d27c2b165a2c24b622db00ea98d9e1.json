{"ast":null,"code":"var _jsxFileName = \"D:\\\\YanivArad\\\\FullStack_Project\\\\Client\\\\cinema\\\\src\\\\GetFromDBToRedux.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GetFromDBToRedux() {\n  _s();\n  const moviesURL = 'http://localhost:8000/movies';\n  const membersURL = 'http://localhost:8000/members';\n  const subscriptionsURL = 'http://localhost:8000/subscriptions';\n  const usersURL = 'http://localhost:8080/users';\n  const dispatch = useDispatch(); // Save data in store\n\n  useEffect(() => {\n    const MoviesData = async () => {\n      const {\n        data: movies\n      } = await axios.get(moviesURL);\n      dispatch({\n        type: 'LOADMOVIES',\n        payload: movies\n      });\n    };\n    MoviesData();\n    const MembersData = async () => {\n      const {\n        data: members\n      } = await axios.get(membersURL);\n      dispatch({\n        type: 'LOADMEMBERS',\n        payload: members\n      });\n    };\n    MembersData();\n    const SubscriptionsData = async () => {\n      const {\n        data: subscriptions\n      } = await axios.get(subscriptionsURL);\n      dispatch({\n        type: 'LOADSUBSCRIPTIONS',\n        payload: subscriptions\n      });\n    };\n    SubscriptionsData();\n    const UsersData = async () => {\n      const {\n        data: users\n      } = await axios.get(usersURL);\n      dispatch({\n        type: 'LOADUSERS',\n        payload: users\n      });\n    };\n    UsersData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Check if need to return here:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(GetFromDBToRedux, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = GetFromDBToRedux;\nexport default GetFromDBToRedux;\nvar _c;\n$RefreshReg$(_c, \"GetFromDBToRedux\");","map":{"version":3,"names":["useEffect","useDispatch","axios","jsxDEV","_jsxDEV","GetFromDBToRedux","_s","moviesURL","membersURL","subscriptionsURL","usersURL","dispatch","MoviesData","data","movies","get","type","payload","MembersData","members","SubscriptionsData","subscriptions","UsersData","users","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/YanivArad/FullStack_Project/Client/cinema/src/GetFromDBToRedux.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nfunction GetFromDBToRedux() {\r\n    const moviesURL = 'http://localhost:8000/movies';\r\n    const membersURL = 'http://localhost:8000/members';\r\n    const subscriptionsURL = 'http://localhost:8000/subscriptions';\r\n    const usersURL = 'http://localhost:8080/users';\r\n\r\n    const dispatch = useDispatch(); // Save data in store\r\n\r\n    useEffect(() => {\r\n        const MoviesData = async () => {\r\n            const { data: movies } = await axios.get(moviesURL);\r\n            dispatch({ type: 'LOADMOVIES', payload: movies });\r\n\r\n        }\r\n        MoviesData();\r\n\r\n        const MembersData = async () => {\r\n            const { data: members } = await axios.get(membersURL);\r\n            dispatch({ type: 'LOADMEMBERS', payload: members });\r\n        }\r\n        MembersData();\r\n\r\n        const SubscriptionsData = async () => {\r\n            const { data: subscriptions } = await axios.get(subscriptionsURL);\r\n            dispatch({ type: 'LOADSUBSCRIPTIONS', payload: subscriptions });\r\n        }\r\n        SubscriptionsData();\r\n\r\n\r\n        const UsersData = async () => {\r\n            const { data: users } = await axios.get(usersURL);\r\n            dispatch({ type: 'LOADUSERS', payload: users });\r\n        };\r\n        UsersData();\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            Check if need to return here:\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GetFromDBToRedux;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAMC,SAAS,GAAG,8BAA8B;EAChD,MAAMC,UAAU,GAAG,+BAA+B;EAClD,MAAMC,gBAAgB,GAAG,qCAAqC;EAC9D,MAAMC,QAAQ,GAAG,6BAA6B;EAE9C,MAAMC,QAAQ,GAAGV,WAAW,EAAE,CAAC,CAAC;;EAEhCD,SAAS,CAAC,MAAM;IACZ,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAM;QAAEC,IAAI,EAAEC;MAAO,CAAC,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACR,SAAS,CAAC;MACnDI,QAAQ,CAAC;QAAEK,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEH;MAAO,CAAC,CAAC;IAErD,CAAC;IACDF,UAAU,EAAE;IAEZ,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAM;QAAEL,IAAI,EAAEM;MAAQ,CAAC,GAAG,MAAMjB,KAAK,CAACa,GAAG,CAACP,UAAU,CAAC;MACrDG,QAAQ,CAAC;QAAEK,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAEE;MAAQ,CAAC,CAAC;IACvD,CAAC;IACDD,WAAW,EAAE;IAEb,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAM;QAAEP,IAAI,EAAEQ;MAAc,CAAC,GAAG,MAAMnB,KAAK,CAACa,GAAG,CAACN,gBAAgB,CAAC;MACjEE,QAAQ,CAAC;QAAEK,IAAI,EAAE,mBAAmB;QAAEC,OAAO,EAAEI;MAAc,CAAC,CAAC;IACnE,CAAC;IACDD,iBAAiB,EAAE;IAGnB,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAM;QAAET,IAAI,EAAEU;MAAM,CAAC,GAAG,MAAMrB,KAAK,CAACa,GAAG,CAACL,QAAQ,CAAC;MACjDC,QAAQ,CAAC;QAAEK,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEM;MAAM,CAAC,CAAC;IACnD,CAAC;IACDD,SAAS,EAAE;EAEf,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIlB,OAAA;IAAAoB,QAAA,EAAK;EAEL;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAM;AAEd;AAACtB,EAAA,CA3CQD,gBAAgB;EAAA,QAMJJ,WAAW;AAAA;AAAA4B,EAAA,GANvBxB,gBAAgB;AA6CzB,eAAeA,gBAAgB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}